my_data ==NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
my_vec <- c(0.5, 55, -10, 6)
num_vec <- c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c( "My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"Olga")
my_name
paste(c(my_name, collapse = " ")
paste (my_name, collapse = " ")
paste (my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
C(x[3], x[5], x[7])
x([3], [5], [7])
x[3], [5], [7]
x[3]
x[5]
c([3, 5, 7])
c(x[3, 5, 7])
c(x{3, 5, 7})
c(3, 5, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
vect(foo)
vect[foo]
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar","norf")
identical(vect2, vect)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- C(1:20, nrow=5, ncol=4)
my_matrix2 <- matrix(C(1:20), nrow=5, ncol=4)
my_matrix2 <- matrix(c(1:20), nrow=5, ncol=4)
my_matrix2 <- matrix(c(1:20), nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c( "Bill", "Gina", "Kelly", "Sean" )
cbind(patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
dim (cnames)
colnames(my_data) <- cnames
my_data
TRUE ==TRUE
(FALSE == TRUE) == FALSE
6==7
(6<7) == TRUE
(6 < 7) == TRUE
TRUE == (6 < 7)
TRUE == 6 < 7
FALSE == 6 < 7
FALSE == (6 < 7)
(6 < 7) == FALSE
nxt()
6 < 7
10 <= 10
5 !=7
5=7 ==!TRUE
(5=7) ==!TRUE
5 !=7
5 !<> 7
5 != 7
( 5 = 7 ) == !TRUE
5 = 7
5 !== 7
5 != = 7
5 == 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,FALSE, FALSE)
TRUE | c(TRUE, FALSE,FALSE)
TRUE || c(TRUE,FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints)
which(ints)
which(ints) >7
which(ints>7)
all(ints)<0
all(ints<0)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder <- function(num=1, divisor=1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
num+divisor
remainder <- function(num=1, divisor=1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num+divisor
}
remainder <- function( num = 1, divisor = 1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
z= num + divisor
}
reminder(2,3)
remainder(2,3)
remainder <- function( num = 1, divisor = 1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
z= num + divisor
return z
}
remainder <- function( num = 1, divisor = 1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
z = num + divisor
print(z)
}
remainder(2,3)
remainder <- function( num = 1, divisor = 1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
z = num + divisor
print(z)
}
remainder <- function( num = 1, divisor = 1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
z = num + divisor
print(z)
}
submit()
submit()
remainder2 <- function( num = 1, divisor = 1) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
z = num + divisor
print(z)
}
remainder2(2,3)
View(my_mean)
View(remainder)
View(remainder)
View(remainder)
View(remainder)
View(remainder)
View(remainder)
remainder2 <- function( num = 3, divisor = 2) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
z = num %% divisor
print(z)
}
remainder2(3,2)
remainder2(7,2)
remainder2
remainder2()
submit()
remainder(5)
remainder(11,5)
remainder(divisor= 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
add_two_numbers <- function(num1, num2){
num1 + num2
}
multiply_two_numbers <- function(num1, num2){
num1 * num2
}
some_function <- function(func){
func(2, 4)
}
2/4
}
evaluate(func)
evaluate(multiply_two_numbers , 2, 3)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
add_two_numbers <- function(num1, num2=2){
num1 + num2
}
multiply_two_numbers <- function(num1, num2=2){
num1 * num2
}
some_function <- function(func){
func(2, 4)
}
2/4
}
evaluate(multiply_two_numbers , 2, 3)
evaluate(multiply_two_numbers , 3)
submit()
submit()
nxt()
evaluate(multiply_two_numbers , 3)
evaluate2 <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
X[length(dat)]
}
evaluate2 <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
dat[length(dat)]
}
evaluate2(sum, c(2, 4, 6))
evaluate2(sum, c(2, 4, 6, 9))
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
dat[length(dat)]
}
submit()
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
dat[length(dat)]
}
submit()
evaluate2(floor, 11.1)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
dat[length(dat)]
round(dat, digits=0)
}
submit()
evaluate2 <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
dat[length(dat)]
round(dat, digits=0)
}
evaluate2(sum, c(2, 4, 6, 9))
evaluate2(floor, 11.1)
evaluate2 <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
round(dat[length(dat)], digits=0)
}
evaluate2(sum, c(2, 4, 6, 9))
evaluate2(floor, 11.1)
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
round(dat[length(dat)], digits=0)
}
submit()
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
#round(dat[length(dat)], digits=0)
func(dat)
}
submit()
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
func <- function (dat) {
round(dat[length(dat)], digits=0)
}
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(func,dat=c(1.4, 3.6, 7.9, 8.8))
evaluate(sd(),dat=c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(dat=c(8, 4,0))
evaluate(func,dat=c(8, 4,0))
evaluate(func,c(8, 4, 0))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
paste("START", ..., "STOP", sep = " ")
submit()
telegram("Good", "morning")
submit()
noun <- args[["noun"]]
submit()
mad_libs(place="Moscow", noon= "nordic", adjective="good")
"%p%" <- function(){ # Remember to add arguments!
paste( left, right, sep = " " )
}
submit()
paste( left, right, sep = " ")
"%p%" <- function(){ # Remember to add arguments!
paste( left, right, sep = " ")
}
"%p%" <- function(){ # Remember to add arguments!
paste( left, right, sep = " ")
}
submit()
paste(left, right, sep = " ")
submit()
"Good" %p% "job!"
"Good" %p% "job!"
'Hello' %p% 'student!'
"Hello" %p% "student!"
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right, sep = " ")
}
submit()
'I'  %p% 'love'  %p%  'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
anclass (d2)
unclass (d2)
t1 <- Sys.time()
t1
class(t1)
uncalss(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class (t2)
unclass (t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x<- matrix(rnorm(200), 20, 10)
apply( x, 1, mean)
apply( x, 2, mean)
apply( x, 1, sum)
x
apply(a, c(1.2), mean))
apply(a, c(1, 2), mean))
a <- array(rnorm(2*2*10), c(2,2,10))
apply(a, c(1, 2), mean))
apply(a, c(1, 2), mean)
rowMeans(a, dim=2)
x <- array(1:12, c(2, 2, 3))
x
apply(x, c(1,2), sum)
apply(x, c(1,3), sum)
apply(x, c(1,10), sum)
apply(x, c(3,1), sum)
apply(x, c(10,1), sum)
a <- array(1:40, c(2,2,10))
apply(x, c(10,1), sum)
apply(x, c(1, 10), sum)
a
apply(a, c(1, 10), sum)
apply(a, c(10, 1), sum)
traceback()
debug(apply(x, c(10,1), sum))
debug(apply(x, c(3,1), sum))
apply(a, c(3, 1), sum)
apply(a, c(1, 3), sum)
debug(apply()
debug(apply()
debug(apply())
debug(apply)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
?iris
cached_matrix < matrix ()
cached_matrix < matrix()
cached_matrix < matrix(nrow=0, ncol=0)
cached_matrix < matrix(0, nrow=0, ncol=0)
cached_matrix <- matrix(0, nrow=0, ncol=0)
class(cached_matrix)
cached_matrix <- matrix ()
class(cached_matrix)
cached_matrix
cached_matrix <- matrix(0, nrow=0, ncol=0)
cached_matrix
list(setmatrix = setmatrix,
getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
cached_inv_matrix
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
# to test C:/GIT/ProgrammingAssignment2/cachematrix.R
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
setwd("C:/R/3C/data")
if (!file.exists("./UCI HAR Dataset")) {
# download the data
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
zipfile="./UCI_HAR_data.zip"
message("Downloading data")
download.file(fileURL, destfile=zipfile)
unzip(zipfile, exdir=".")
}
features <- read.table("./UCI HAR Dataset/features.txt")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
# rename columns
names(features) <- c("feature_id","feature_name")
names(activity_labels) <- c("activity","activity_name")
# load, rename columns and join test dataset
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
x_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
names(subject_test) <- "subject"
names(x_test) <- features$feature_name
names(y_test) <- "activity"
test <- cbind(y_test, x_test, subject_test)
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
x_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
names(subject_train) <- "subject"
names(x_train) <- features$feature_name
names(y_train) <- "activity"
train <- cbind(y_train, x_train, subject_train)
train$IsTrainSet <-TRUE
test$IsTrainSet <-FALSE
if(any(names(test) != names(train))) stop("The column names are not equal.")
alldata <- rbind(test, train)
std_names <- grep("std\\(\\)", names(alldata), value = TRUE)
mean_names <- grep("mean\\(\\)",names(alldata), value = TRUE)
columns_with_std_mean <- c(std_names, mean_names)
selected_columns <- c("activity","subject", columns_with_std_mean)
tidydata <- alldata [  ,selected_columns]
tidydata$activity <- sapply(tidydata$activity, function(x){gsub(x, activity_labels[activity_labels$activity==x, 2], x)})
## 4. Appropriately labeling the data set with descriptive variable names (Remove the parenthesis and dashes names ).
names(tidydata) <- gsub("std", "StanDev"  , names(tidydata))
names(tidydata) <- gsub("mean", "Mean"  , names(tidydata))
names(tidydata) <- gsub("\\(", ""  , names(tidydata))
names(tidydata) <- gsub("\\)", ""  , names(tidydata))
names(tidydata) <- gsub("-", ""  , names(tidydata))
names(tidydata) <- gsub("BodyBody", "Body"  , names(tidydata))
tidydata$activity_mean <- apply(tidydata[,3:68], 1, mean)
## Save the tidy result into a tidydata.csv file
setwd("C:/GIT/datasciencecoursera/getting_cleaning_data")
write.csv(tidydata, file = 'tidydata.csv', row.names = FALSE, quote = FALSE)
View(tidydata)
View(tidydata)
